extends layout

block content
  div.content
    h1= title    
    if user && user.IsAdmin   
      // Checkboxes
      label
        input(type="checkbox" name="isPrintBOD" id="isPrintBOD" value="isPrintBOD")
        | GK + UP (Corrugate Marking)
      label
        input(type="checkbox" name="isPrintHR" id="isPrintHR" value="isPrintHR")
        | HR
      label
        input(type="checkbox" name="isPrintSC" id="isPrintSC" value="isPrintSC")
        | SC 2.0
      label
        input(type="checkbox" name="isPrintEidos" id="isPrintEidos" value="isPrintEidos")
        | Eidos
      label
        input(type="checkbox" name="isPrintCL" id="isPrintCL" value="isPrintCL")
        | Laser
      label
        input(type="checkbox" name="isPrintDS" id="isPrintDS" value="isPrintDS")
        | DS
      label
        input(type="checkbox" name="isPrintColorJet" id="isPrintColorJet" value="isPrintColorJet")
        | ColorJet 2      
    else 
      label(for="isPrintBOD") 
        input(type="radio" name="singlePrintOption" id="isPrintBOD")
        | GK + UP (Corrugate Marking)
      label(for="isPrintHR") 
        input(type="radio" name="singlePrintOption" id="isPrintHR")
        | HR
      label(for="isPrintSC") 
        input(type="radio" name="singlePrintOption" id="isPrintSC")
        | SC 2.0
      label(for="isPrintEidos") 
        input(type="radio" name="singlePrintOption" id="isPrintEidos")
        | Eidos
      label(for="isPrintCL") 
        input(type="radio" name="singlePrintOption" id="isPrintCL")
        | Laser
      label(for="isPrintDS") 
        input(type="radio" name="singlePrintOption" id="isPrintDS")
        | DS
      label(for="isPrintColorJet") 
        input(type="radio" name="singlePrintOption" id="isPrintColorJet")
        | ColorJet 2      

    // Scan button
    button#scanButton Scan
    pre#customer-info

  // Modal popup for QR code scanner
  div#barcodeScannerModel.modal(style="display:none;")
    div.modal-content
      div#reader-container
        div#reader
      button#closeModal Close  

  div#loading-spinner(style="display:none;")
    div.spinner
      img(src="/images/loader.gif", alt="Loading...")
    
  script(src='https://unpkg.com/html5-qrcode')
  script.
    window.user = !{JSON.stringify(user)};

    //const html5QrCode = new Html5Qrcode("reader");
    
    let errorShown = false;
    let isProcessing = false;

    function displayMessageToUser(isError){
      //hide the qr code scanner
      document.getElementById('barcodeScannerModel').style.display = 'none';
    }

    function logErrorToServer(message) {
      fetch('/api/log-error', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ message }),
      }).catch(err => {
        console.error('Error logging ERROR to server:', err);
      });
    }

     function logInfoToServer(message) {
      fetch('/api/log-info', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ message }),
      }).catch(err => {
        console.error('Error logging INFO to server:', err);
      });
    }

    async function getContactData(barcode) {
      try {
        const response = await fetch(`/api/get-contact-info?barcode=${encodeURIComponent(barcode)}`);
        const result = await response.json();
        return result;

      } catch (error) {
        handleError(`Error retrieving contact information: ${error.message}`);
        return null;
      }
    }

    async function saveScanInfo(scanInfo) {
      try {
        logInfoToServer('index.pug.saveScanInfo: Pre save:' + JSON.stringify(scanInfo));
        const response = await fetch('/api/save-scan-info', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(scanInfo),
        });

        const jsonResponse = await response.json();
      
        logInfoToServer('index.pug.saveScanInfo: Scan API response:' + JSON.stringify(jsonResponse));        
        return jsonResponse;
      } catch (error) {
        handleError(`index.pug.saveScanInfo: Error saving scan information: ${error.message}`);
        return null;
      }
    }

    
    async function saveLeadInfo(leadInfo) {
      try {        
          const response = await fetch('/api/save-lead-info', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(leadInfo),
        });
        const jsonResponse = await response.json();
        logInfoToServer('Save Lead API response:' + JSON.stringify(jsonResponse))

        return jsonResponse;
      } catch (error) {
        handleError(`Error saving lead information: ${error.message}`);
        return null;
      }
    }

    async function onScanSuccess(decodedText, decodedResult) {
      if (isProcessing) return; // Prevent multiple API calls
      isProcessing = true;
      

      // Handle the scanned code
      logInfoToServer(`Code matched = ${decodedText}, ${JSON.stringify(decodedResult)}`);
            
      // Stop the QR code scanner
      try {
        await html5QrCode.stop().catch(err => handleError(`Error stopping QR code scanner: ${err}`));;
        
        document.getElementById('loading-spinner').style.display = 'flex';
        document.getElementById('scanButton').disabled = true;
        // Close the modal
        document.getElementById('barcodeScannerModel').style.display = 'none';
        document.querySelector('.content').classList.remove('modal-open');

        // Get checkbox values     
        const barcode = decodedText;   
        const isPrintHR = document.getElementById('isPrintHR').checked;
        const isPrintBOD = document.getElementById('isPrintBOD').checked;
        const isPrintSC = document.getElementById('isPrintSC').checked;
        const isPrintEidos = document.getElementById('isPrintEidos').checked;
        const isPrintCL = document.getElementById('isPrintCL').checked;
        const isPrintDS = document.getElementById('isPrintDS').checked;
        const isPrintColorJet = document.getElementById('isPrintColorJet').checked;    
        
        const scanInfo = { barcode, isPrintHR, isPrintBOD, isPrintSC, isPrintEidos, isPrintCL, isPrintDS, isPrintColorJet, userId: window.user.Id };
        try {

          const saveScanInfoResult = await saveScanInfo(scanInfo);

          logInfoToServer('index.pug.onScanSuccess: Save Scan API response:' + JSON.stringify(saveScanInfoResult))
          if (saveScanInfoResult.success) {
            logInfoToServer('Code and selection values saved successfully. Code: ' + barcode);

            // Retrieve contact info from the server or 3rd party service
            var contactInfo = await getContactData(barcode);

            if (contactInfo) {                                         
              contactInfo = contactInfo.contactInfo;
              const leadInfo = { firstName: contactInfo.FirstName, lastName: contactInfo.LastName, email: contactInfo.Email, company: contactInfo.Company, phone: contactInfo.Phone, barcode: barcode, userId: window.user.Id, isPrintHR, isPrintBOD, isPrintSC, isPrintEidos, isPrintCL, isPrintDS, isPrintColorJet };
               logInfoToServer('Saving lead info to the server: ' + JSON.stringify(leadInfo));
              // Save lead info to the server incl. technology interest  
              const saveLeadResult = await saveLeadInfo(leadInfo);   

              if (saveLeadResult || saveLeadResult.success) {
                // When user info retrieved and lead saved, hide loading spinner
                document.getElementById('loading-spinner').style.display = 'none';
                document.getElementById('scanButton').disabled = false;
                const leadInfo = saveLeadResult.lead;
                                                                                                     
                // Create a form
                const form = document.createElement('form');
                form.method = 'POST';
                form.action = '/scan-result';

                // Add the object data as hidden inputs
                for (const key in leadInfo) {
                  if (leadInfo.hasOwnProperty(key)) {
                    const input = document.createElement('input');
                    input.type = 'hidden';
                    input.name = key;
                    input.value = leadInfo[key];
                    form.appendChild(input);
                  }
                }

                // Append the form to the body and submit it
                document.body.appendChild(form);
                form.submit();
              } else {
                handleError('Error saving lead information. ' + saveLeadResult.message);
              }
            } else {
              handleError('Error retrieving contact information. ' + saveLeadResult.message);
            }
          } else {
            handleError(`1: Error saving scan info: ${saveScanInfoResult.message}`);
          }
        } catch (error) {
          handleError(`2: Error saving scan info: ${error.message}`);
        } finally {
          isProcessing = false;
        }
      } catch (err) {
        handleError(`Error stopping barcode scanner: ${err}`);
        isProcessing = false;
      }
    }

    function onScanFailure(error) {
      // Handle scan failure, usually better to ignore and keep scanning.
      console.warn(`Code scan error = ${error}`);
    }

    // Define the handleError function
    function handleError(message) {
      console.error(message);
      // Display the error message to the user (you can customize this as needed)
      window.location.href = `/error?message=${encodeURIComponent(message)}`;
      //alert(message);
    }

    // Add event listener to the scan button
    document.addEventListener('DOMContentLoaded', function() {
    html5QrCode = new Html5Qrcode("reader");


    // Preload the camera feed
    html5QrCode.start(
      { facingMode: "environment" }, // Use rear camera
      {
        fps: 2,    // Scans per second
        qrbox: { width: 250, height: 250 },
        rememberLastUsedCamera: false,  // Disable storing the last used camera
        supportedScanTypes: [Html5QrcodeScanType.SCAN_TYPE_CAMERA],
        formatsToSupport:  [Html5QrcodeSupportedFormats.QR_CODE]
      },
          onScanSuccess,
          onScanFailure
    ).then(() => {
      
      
      //- html5QrCode.clear();
    }).catch(err => {
      handleError(`Error preloading QR code scanner: ${err}`);
    });

      document.getElementById('scanButton').addEventListener('click', function() {
        errorShown = false; // Reset the error flag when the scan button is clicked
        isProcessing = false; // Reset the processing flag when the scan button is clicked
        document.getElementById('barcodeScannerModel').style.display = 'flex';
        document.querySelector('.content').classList.add('modal-open');
       //- // Stop the camera feed after preloading
      html5QrCode.stop().catch(err => alert(`Error stopping QR code scanner: ${err}`)).then(() => {
        html5QrCode.start(
          { facingMode: "environment" }, // Use rear camera
          {
            fps: 10,    // Scans per second
            qrbox: { width: 250, height: 250 },
            rememberLastUsedCamera: false,  // Disable storing the last used camera
            supportedScanTypes: [Html5QrcodeScanType.SCAN_TYPE_CAMERA],
            formatsToSupport:  [Html5QrcodeSupportedFormats.QR_CODE]
          },
          onScanSuccess,
          onScanFailure
        ).catch(err => {
          handleError(`Error starting QR code scanner: ${err}`);
        });});
      });

      document.getElementById('closeModal').addEventListener('click', function() {
        document.getElementById('barcodeScannerModel').style.display = 'none';
        document.querySelector('.content').classList.remove('modal-open');
        html5QrCode.stop().catch(err => logErrorToServer(`Error stopping QR code scanner: ${err}`));
      });
    });