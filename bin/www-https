var fs = require('fs');
var http = require('http');
var https = require('https');
var app = require('../app');
var logger = require('../logger'); // Import the custom logger

//** HTTPS SERVER SETUP */
// Get port from environment and store in Express.
var httpsPort = normalizePort(process.env.HTTPS_PORT || '443');
app.set('httpsPort', httpsPort);

// SSL Certificate options setup
var options = {
  key: fs.readFileSync('./keys/key.pem'),
  cert: fs.readFileSync('./keys/cert.pem')
};

var httpsServer = https.createServer(options, app);

// Listen on provided port, on all network interfaces.
httpsServer.listen(httpsPort, '0.0.0.0');
httpsServer.on('error', onHttpsError);
httpsServer.on('listening', onHttpsListening);

// Normalize a port into a number, string, or false.
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

function onHttpsError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof httpsPort === 'string'
    ? 'Pipe ' + httpsPort
    : 'Port ' + httpsPort;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      logger.error('**HTTPS** ' + bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      logger.error('**HTTPS** ' + bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onHttpsListening() {
  var addr = httpsServer.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  logger.info('**HTTPS** ' + 'Listening on ' + bind);
}